C51 COMPILER V9.56.0.0   ADC                                                               12/21/2020 12:13:23 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Objects\adc.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\Device\adc\adc.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\D
                    -evice\LED;..\Device\system_digital_tube;..\Device\BEEP;..\Device\timer;..\Device\key;..\Device\uart;..\Device\adc) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\adc.lst) OBJECT(.\Objects\adc.obj)

line level    source

   1          #include "adc.h"
   2          #include "uart.h"
   3          #include "system_digital_tube.h"
   4          #include "key.h"
   5          #include "LED.h"
   6          #include "Beep.h"
   7          
   8          
   9          //const u16 SKU_RES_Table = [];
  10          
  11          u16 systick_2min = 0;
  12          
  13          
  14          void delay_us ( u16 us ) //16MHz
  15          {
  16   1              while ( --us )
  17   1              {
  18   2                      _nop_();
  19   2                      _nop_();
  20   2              }
  21   1      }
  22          
  23          void ADC_Init_Config ( void )
  24          {
  25   1              P0M0 = 0x01;            //P00设置为模拟输入
  26   1              P0M1 = 0x01;        //P01设置为模拟输入
  27   1              P0M2 = 0x01;            //P02设置为模拟输入
  28   1              P0M3 = 0x01;        //P03设置为模拟输入
  29   1      
  30   1              P2M6 = 0XC1;        //设置P35推挽输出
  31   1              P2M7 = 0XC1;        //设置P25推挽输出
  32   1              ADCC0 = 0x81;           //打开ADC转换电源                 00 VDD
  33   1      //                                                                                      01 内部4V
  34   1      //                                                                                      10 内部3V
  35   1      //                                                                                      11 内部2V
  36   1      //1、 内部参考电压选择为 2V 时， VDD 电压须高于 2.7V；
  37   1      //    内部参考电压选择为 3V 时， VDD 电压须高于 3.5V；
  38   1      //    内部参考电压选择为 4V 时， VDD 电压须高于4.5V。
  39   1      //2、 系统进入掉电模式前，建议将 ADC 参考电压选择非 VDD，可以进一步降低系统
             -功耗。
  40   1              delay_us ( 20 );                                                //延时20us，确保ADC系统稳定
  41   1              ADCC2 = 0x4B;                                           //转换结果12位数据，数据右对齐，ADC时钟16分频 16M/16 = 1MHz
  42   1              RT_0 = 1;
  43   1              RT_1 = 1;
  44   1      }
  45          
  46          static u16 get_adc_val_ch0 ( void )
  47          {
  48   1              u16 adc_val = 0;
  49   1              ADCC1 = 0x00;                   //CH0
  50   1      
  51   1              ADCC0 |= 0x40;                                  //启动ADC转换
  52   1              while ( ! ( ADCC0&0x20 ) );                     //等待ADC转换结束
C51 COMPILER V9.56.0.0   ADC                                                               12/21/2020 12:13:23 PAGE 2   

  53   1              ADCC0 &=~ 0x20;                                 //清除标志位
  54   1              adc_val = ADCR;                                 //获取ADC的值
  55   1              delay_us ( 20 );
  56   1              return adc_val;
  57   1      }
  58          
  59          static u16 get_adc_val_ch1 ( void )
  60          {
  61   1              u16 adc_val = 0;
  62   1              ADCC1 = 0x01;                   //CH1
  63   1      
  64   1              ADCC0 |= 0x40;                                  //启动ADC转换
  65   1              while ( ! ( ADCC0&0x20 ) );                     //等待ADC转换结束
  66   1              ADCC0 &=~ 0x20;                                 //清除标志位
  67   1      
  68   1              adc_val = ADCR;                                 //获取ADC的值
  69   1      
  70   1              delay_us ( 20 );
  71   1              // ADC_printf("P01_ADC = %d \r\n",adc_val);
  72   1              return adc_val;
  73   1      }
  74          
  75          static u16 get_adc_val_ch2 ( void )
  76          {
  77   1              u16 adc_val = 0;
  78   1              ADCC1 = 0x02;                   //CH2
  79   1      
  80   1              ADCC0 |= 0x40;                                  //启动ADC转换
  81   1              while ( ! ( ADCC0&0x20 ) );                     //等待ADC转换结束
  82   1              ADCC0 &=~ 0x20;                                 //清除标志位
  83   1              adc_val = ADCR;                                 //获取ADC的值
  84   1              delay_us ( 20 );
  85   1              return adc_val;
  86   1      }
  87          
  88          static u16 get_adc_val_ch3 ( void )
  89          {
  90   1              u16 adc_val = 0;
  91   1              ADCC1 = 0x03;                   //CH3
  92   1      
  93   1              ADCC0 |= 0x40;                                  //启动ADC转换
  94   1              while ( ! ( ADCC0&0x20 ) );                     //等待ADC转换结束
  95   1              ADCC0 &=~ 0x20;                                 //清除标志位
  96   1              adc_val = ADCR;                                 //获取ADC的值
  97   1              delay_us ( 20 );
  98   1              // ADC_printf("P01_ADC = %d \r\n",adc_val);
  99   1              return adc_val;
 100   1      }
 101          
 102          static void get_ADC_value_ch02ch3 ( u16* ch0_value,u16* ch1_value,u16* ch2_value,u16* ch3_value )
 103          {
 104   1              RT_0 = 1;
 105   1              RT_1 = 1;
 106   1              delay_us ( 5000 );
 107   1      
 108   1              *ch0_value = get_adc_val_ch0 ();
 109   1              *ch1_value = get_adc_val_ch1 ();
 110   1              *ch2_value = get_adc_val_ch2 ();
 111   1              *ch3_value = get_adc_val_ch3 ();
 112   1      }
 113          
 114          static u8 get_ADC_value_EX_channl ( void ) //u16* temp_std,u16* heat_std
C51 COMPILER V9.56.0.0   ADC                                                               12/21/2020 12:13:23 PAGE 3   

 115          {
 116   1              u16 ch0_adc = 0,ch1_adc =0,ch2_adc =0,ch3_adc =0;
 117   1              RT_0 = 1;
 118   1              RT_1 = 0;
 119   1              delay_us ( 5000 );
 120   1              ch0_adc = get_adc_val_ch0 ();
 121   1              KEY_printf ( "ch0_adc = %d \r\n",ch0_adc ); //pjw set
 122   1              ch1_adc = get_adc_val_ch1 ();
 123   1              KEY_printf ( "ch1_adc = %d \r\n",ch1_adc ); //pjw set
 124   1              ch2_adc = get_adc_val_ch2 ();
 125   1              KEY_printf ( "ch2_adc = %d \r\n",ch2_adc ); //pjw set
 126   1              ch3_adc = get_adc_val_ch3 ();
 127   1              KEY_printf ( "ch3_adc = %d \r\n",ch3_adc ); //pjw set
 128   1      
 129   1              if ( ( ch2_adc > 80 ) && ( ch3_adc > 100 ) )
 130   1              {
 131   2                      return blank_short_circuit_leakage;
 132   2              }
 133   1              RT_0 = 0;
 134   1              RT_1 = 1;
 135   1              delay_us ( 5000 );
 136   1              gm_printf ( "\r\n*************************************\r\n" );
 137   1              ch0_adc = get_adc_val_ch0 ();
 138   1              KEY_printf ( "ch0_adc = %d \r\n",ch0_adc ); //pjw set
 139   1              ch1_adc = get_adc_val_ch1 ();
 140   1              KEY_printf ( "ch1_adc = %d \r\n",ch1_adc ); //pjw set
 141   1              ch2_adc = get_adc_val_ch2 ();
 142   1              KEY_printf ( "ch2_adc = %d \r\n",ch2_adc ); //pjw set
 143   1              ch3_adc = get_adc_val_ch3 ();
 144   1              KEY_printf ( "ch3_adc = %d \r\n",ch3_adc ); //pjw set
 145   1              if ( ( ch0_adc > 80 ) && ( ch1_adc > 100 ) )
 146   1              {
 147   2                      return blank_short_circuit_leakage;
 148   2              }
 149   1              return Res_leakage_OK;
 150   1      }
 151          
 152          
 153          static void Voltg_calc ( u16* ch0_v,u16* ch1_v,u16* ch2_v,u16* ch3_v )
 154          {
 155   1              u16 ch0_ad_value = 0,ch1_ad_value = 0,ch2_ad_value = 0,ch3_ad_value = 0;
 156   1              float temp = 0;
 157   1              get_ADC_value_ch02ch3 ( &ch0_ad_value,&ch1_ad_value,&ch2_ad_value,&ch3_ad_value );
 158   1      //   ADC_printf ( "ch0_ad = %d ch1_ad = %d ch2_ad = %d ch3_ad = %d \r\n",ch0_ad_value,ch1_ad_value,ch2_ad_
             -value,ch3_ad_value ); //pjw set
 159   1      
 160   1              temp = ( float ) ch0_ad_value/4095*ADC_CAILI;
 161   1      //      KEY_printf ( "adv0f = %f \r\n",temp ); //pjw set
 162   1              * ch0_v = ( u16 ) temp;
 163   1      //      KEY_printf ( "rtemper1 = %d \r\n",*ch0_v ); //pjw set
 164   1      
 165   1              temp = 0;
 166   1      
 167   1              temp = ( float ) ch1_ad_value/4095;
 168   1      //      KEY_printf ( "adv1_temp = %f \r\n",temp ); //pjw set
 169   1              temp = temp*ADC_CAILI;
 170   1              * ch1_v = ( u16 ) temp;
 171   1      //      KEY_printf ( "rtemper2 = %d \r\n",*ch1_v ); //pjw set
 172   1      
 173   1              temp = 0;
 174   1      
 175   1              temp = ( float ) ch2_ad_value/4095*ADC_CAILI;
C51 COMPILER V9.56.0.0   ADC                                                               12/21/2020 12:13:23 PAGE 4   

 176   1      //      KEY_printf ( "adv2f = %f \r\n",temp ); //pjw set
 177   1              * ch2_v = ( u16 ) temp;
 178   1      //      KEY_printf ( "heat1 = %d \r\n",*ch2_v ); //pjw set
 179   1      
 180   1              temp = 0;
 181   1      
 182   1              temp = ( float ) ch3_ad_value/4095*ADC_CAILI;
 183   1      //      KEY_printf ( "adv3f = %f \r\n",temp ); //pjw set
 184   1              * ch3_v = ( u16 ) temp;
 185   1      //      KEY_printf ( "heat2 = %d \r\n",*ch3_v ); //pjw set
 186   1      
 187   1      }
 188          
 189          u8 Cacl_Res ( u16* temper_res,u16* heat_res )
 190          {
 191   1              float temp =0,res = 0;
 192   1              u16 ch0 = 0,ch1 = 0,ch2 = 0,ch3 = 0;
 193   1              Voltg_calc ( &ch0,&ch1,&ch2,&ch3 );
 194   1      
 195   1              ADC_printf ( "ch0 = %d ch1 = %d ch2 = %d ch3 = %d \r\n",ch0,ch1,ch2,ch3 ); //pjw set
 196   1              if ( ( ch1 < 90 ) || ( ch3 < 90 ) )
 197   1              {
 198   2                      return EORROR;
 199   2              }
 200   1      
 201   1              temp = (  ( ( float ) ch0 /1000 ) - ( ( float ) ch1/1000 ) ) / ( ( ( float ) ch1/1000 ) /510 );
 202   1              ADC_printf ( "temper_res = %f \r\n",temp ); //pjw set
 203   1              *temper_res = ( u16 ) temp;
 204   1      //      ADC_printf ( "temper_res = %d \r\n",* temper_res ); //pjw set
 205   1      
 206   1              temp = (  ( ( float ) ch2 /1000 ) - ( ( float ) ch3/1000 ) ) / ( ( ( float ) ch3/1000 ) /510 );
 207   1              ADC_printf ( "heat_res = %f \r\n",temp ); //pjw set
 208   1              *heat_res = ( u16 ) temp;
 209   1      //      ADC_printf ( "heat_res = %d \r\n",* heat_res ); //pjw set
 210   1      
 211   1              return SUCCESS;
 212   1      }
 213          u8 SKU_Res_test ( void )
 214          {
 215   1              u16 Temper_res = 0,Heat_res = 0,leakage_std = 0;
 216   1              if ( Cacl_Res ( &Temper_res,&Heat_res ) == SUCCESS )
 217   1              {
 218   2                      systick_2min = 0;
 219   2                      leakage_std = get_ADC_value_EX_channl ( );
 220   2                      if ( leakage_std == Res_leakage_OK )
 221   2                      {
 222   3                              switch ( tube_num.SKU_std )
 223   3                              {
 224   4                                      case K9011:
 225   4                                      case K9019:
 226   4                                      case K9029:
 227   4                                      case K9014:
 228   4                                      case K9045:
 229   4                                              if ( ( Temper_res > K9011_MIN_TEMPER ) && ( Temper_res < K9011_MAX_TEMPER ) )
 230   4                                              {
 231   5                                                      if ( ( Heat_res >K9011_MIN_HEAT ) && ( Heat_res < K9011_MAX_HEAT ) )
 232   5                                                      {
 233   6                                                              return Res_test_OK;
 234   6                                                      }
 235   5                                                      else
 236   5                                                      {
 237   6                                                              return Heat_test_fail;
C51 COMPILER V9.56.0.0   ADC                                                               12/21/2020 12:13:23 PAGE 5   

 238   6                                                      }
 239   5                                              }
 240   4                                              else
 241   4                                              {
 242   5                                                      return Temper_test_fail;
 243   5                                              }
 244   4                                              break;
 245   4                                      case K9018:
 246   4                                      case K9025:
 247   4                                              if ( ( Temper_res > K9018_MIN_TEMPER ) && ( Temper_res < K9018_MAX_TEMPER ) )
 248   4                                              {
 249   5                                                      if ( ( Heat_res > K9018_MIN_HEAT ) && ( Heat_res < K9018_MAX_HEAT ) )
 250   5                                                      {
 251   6                                                              return Res_test_OK;
 252   6                                                      }
 253   5                                                      else
 254   5                                                      {
 255   6                                                              return Heat_test_fail;
 256   6                                                      }
 257   5                                              }
 258   4                                              else
 259   4                                              {
 260   5                                                      return Temper_test_fail;
 261   5                                              }
 262   4                                              break;
 263   4                                      case K9028:
 264   4                                              if ( ( Temper_res > K9028_MIN_TEMPER ) && ( Temper_res < K9028_MAX_TEMPER ) )
 265   4                                              {
 266   5                                                      if ( ( Heat_res > K9028_MIN_HEAT ) && ( Heat_res < K9028_MAX_HEAT ) )
 267   5                                                      {
 268   6                                                              return Res_test_OK;
 269   6                                                      }
 270   5                                                      else
 271   5                                                      {
 272   6                                                              return Heat_test_fail;
 273   6                                                      }
 274   5                                              }
 275   4                                              else
 276   4                                              {
 277   5                                                      return Temper_test_fail;
 278   5                                              }
 279   4                                              break;
 280   4                                      case K9017:
 281   4                                              if ( ( Temper_res > K9017_MIN_HEAT ) && ( Temper_res < K9017_MAX_TEMPER ) )
 282   4                                              {
 283   5                                                      if ( ( Heat_res > K9017_MIN_HEAT ) && ( Heat_res < K9017_MAX_HEAT ) )
 284   5                                                      {
 285   6                                                              return Res_test_OK;
 286   6                                                      }
 287   5                                                      else
 288   5                                                      {
 289   6                                                              return Heat_test_fail;
 290   6                                                      }
 291   5                                              }
 292   4                                              else
 293   4                                              {
 294   5                                                      return Temper_test_fail;
 295   5                                              }
 296   4                                              break;
 297   4                                      case K8104:
 298   4                                      case K8105:
 299   4                                              if ( ( Temper_res > K8104_MIN_HEAT ) && ( Temper_res < K8104_MAX_TEMPER ) )
C51 COMPILER V9.56.0.0   ADC                                                               12/21/2020 12:13:23 PAGE 6   

 300   4                                              {
 301   5                                                      if ( ( Heat_res > K8104_MIN_HEAT ) && ( Heat_res < K8104_MAX_HEAT ) )
 302   5                                                      {
 303   6                                                              return Res_test_OK;
 304   6                                                      }
 305   5                                                      else
 306   5                                                      {
 307   6                                                              return Heat_test_fail;
 308   6                                                      }
 309   5                                              }
 310   4                                              else
 311   4                                              {
 312   5                                                      return Temper_test_fail;
 313   5                                              }
 314   4                                              break;
 315   4                              }
 316   3                      }
 317   2                      else 
 318   2                              {
 319   3                      return blank_short_circuit_leakage;
 320   3                         }
 321   2              }
 322   1              else
 323   1              {
 324   2                      return No_Blanket;
 325   2              }
 326   1      }
 327          
 328          void Blanket_Cacl_Process ( void )
 329          {
 330   1      
 331   1              if ( tube_num.tube_std ==  OFF )
 332   1              {
 333   2                      LED2 = 1;
 334   2                      LED1 = 1;
 335   2                      LED0 = 1;
 336   2              }
 337   1              else
 338   1              {
 339   2      
 340   2                      switch ( SKU_Res_test () )
 341   2                      {
 342   3                              case Res_test_OK:
 343   3                                      LED1 = 0;
 344   3                                      LED0 = 1;
 345   3                                      LED2 = 1;
 346   3                                      beep.beep_std = BEEP_OK;
 347   3                                      beep.beep_std_of = 1;
 348   3                                      break;
 349   3                              case Temper_test_fail:
 350   3                              case Heat_test_fail:
 351   3                              case blank_short_circuit_leakage:       
 352   3                                      LED1 = 1;
 353   3                                      LED2 = 1;
 354   3                                      LED0 = 0;
 355   3                                      beep.beep_std = BEEP_ERROR;
 356   3                                      beep.beep_std_of = 1;
 357   3                                      break;
 358   3                              case No_Blanket:
 359   3                                      LED2 = !LED2;
 360   3                                      LED1 = 1;
 361   3                                      LED0 = 1;
C51 COMPILER V9.56.0.0   ADC                                                               12/21/2020 12:13:23 PAGE 7   

 362   3                                      break;
 363   3                      }
 364   2                      if ( ++systick_2min > TIME2OFF )
 365   2                      {
 366   3                              systick_2min = 0;
 367   3                              tube_num.tube_std = OFF;
 368   3                      }
 369   2                      //get_ADC_value_EX_channl ( );
 370   2              }
 371   1      
 372   1      }
 373          
 374          
*** WARNING C291 IN LINE 326 OF ..\Device\adc\adc.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2085    ----
   CONSTANT SIZE    =    181    ----
   XDATA SIZE       =      2      72
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
