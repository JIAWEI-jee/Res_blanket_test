C51 COMPILER V9.56.0.0   UART                                                              11/16/2020 18:59:00 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\Device\uart\uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\Device\LED;..\Device\system_digital_tube;..\Device\BEEP;..\Device\timer;..\Device\key;..\Device\uart;..\Device\adc) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "uart.h"
   2          
   3           volatile u8 usart_rx_buffer[30] = {0};
   4           volatile u8 usart_rx_cnt;
   5           u8 usart_rx_flag = 0;
   6           
   7          u8 temper_val = 0;
   8          
   9          
  10          #define PRODUCTE_CMD_HEADER_VALUE                   0x55
  11          #define PRODUCTE_CMD_TAIL1_VALUE                    0x0D
  12          #define PRODUCTE_CMD_TAIL2_VALUE                    0x0A
  13          
  14          
  15          struct producte_cmd_struct
  16          {
  17              u8 header;
  18              u8 funcode;
  19              u8 Data;
  20              u8 tail1;
  21              u8 tail2;
  22          };
  23          
  24          
  25          
  26          //初始化串口9600
  27          void uart_init(void)
  28          {
  29   1      //  #if _DEBUG_PRINTF_
  30   1        P2M3 = 0xC1;    //P16设置为推挽输出
  31   1        P3M4 = 0x61;    //P17设置为上拉输入
  32   1        TXD_MAP = 0x23;   //TXD映射P16
  33   1        RXD_MAP = 0x34;   //RXD映射P17  
  34   1        
  35   1        //波特率计算
  36   1        //波特率 = 1/16 * (T4时钟源频率 / 定时器4预分频比) / (65536 - 0xFF98)
  37   1        //       = 1/16 * ((16000000 / 1) / 104)
  38   1        //     = 9615.38(误差0.16%)
  39   1      
  40   1        //波特率9600
  41   1        //反推初值 = (65536 - ((T4时钟源频率 / 定时器4预分频比) * (1 / 16)) / 波特率)
  42   1        //       = (65536 - (16000000 * (1 / 16) / 9600))
  43   1        //       = (65536 - 104.167)
  44   1        //         = FF98
  45   1        // TH4 = 0xFF;
  46   1        // TL4 = 0x98;      //波特率9600
  47   1        TH4 = 0xFF;//9600  4M 波特率9600
  48   1        TL4 = 0x98; 
  49   1        T4CON = 0x06;   //T4工作模式：UART1波特率发生器
  50   1        SCON2 = 0x02;   //8位UART，波特率可变 方式一
  51   1        SCON = 0x10;    //允许串行接收
  52   1        ES1 = 1;      //使能串口中断
  53   1        //#endif
C51 COMPILER V9.56.0.0   UART                                                              11/16/2020 18:59:00 PAGE 2   

  54   1      }
  55          
  56          
  57          //串口发送一个字符
  58           void hal_uart_putchar(char Char)
  59          {
  60   1        ES1= 0;       //失能UART1中断
  61   1        SBUF = Char;
  62   1        while(!TI);
  63   1        TI = 0;
  64   1        ES1= 1;       //UART1接收使能
  65   1      
  66   1        
  67   1      }
  68          
  69          
  70          /* @function:串口发送一个字节
  71           * @param:需要发送的字节
  72           * @return:None
  73           */
  74          static void producte_com_send_one_bit(char Data)
  75          {
  76   1         hal_uart_putchar(Data);
  77   1      }
  78          /* @function:串口发送数组
  79           * @param:data:数组头指针
  80           *        len:数组长度
  81           * @return:None
  82           */
  83          static void producte_com_send_data(u8 *Data, u8 len)
  84          {
  85   1          u8 i;
  86   1          for (i = 0; i < len; i++)
  87   1          {
  88   2              producte_com_send_one_bit(Data[i]);
  89   2          }
  90   1      }
  91          
  92          /* @function:发送命令
  93           * @param:funcode:功能码
  94           *        data:数据
  95           * @return:None
  96           */
  97           void producte_send_cmd(u8 funcode, u8 Data)
  98          {
  99   1          struct producte_cmd_struct cmd_t;
 100   1          cmd_t.header = PRODUCTE_CMD_HEADER_VALUE;
 101   1          cmd_t.funcode = funcode;
 102   1          cmd_t.Data = Data;
 103   1          cmd_t.tail1 = PRODUCTE_CMD_TAIL1_VALUE;
 104   1          cmd_t.tail2 = PRODUCTE_CMD_TAIL2_VALUE;
 105   1          producte_com_send_data((u8 *)&cmd_t, sizeof(struct producte_cmd_struct));
 106   1      }
 107          
 108          
 109          //重写stdio 中的putchar函数  实现printf
 110          char putchar(char c)
 111          {
 112   1        hal_uart_putchar(c);
 113   1        return c;
 114   1      }
 115          
C51 COMPILER V9.56.0.0   UART                                                              11/16/2020 18:59:00 PAGE 3   

 116          
 117          void UART1_Rpt(void) interrupt UART1_VECTOR
 118          {
 119   1         u8 Data = 0;
 120   1        if(SCON & 0x01)           //判断接收中断标志位
 121   1        {
 122   2          Data = SBUF;        //转存8位串口接收数据  
 123   2        //  hal_uart_putchar( Data);
 124   2          SCON &=~ 0x01;                //清除接收中断标志位
 125   2           /* receive Data */
 126   2              switch(usart_rx_flag)
 127   2              {
 128   3                  case 0:
 129   3                      if(Data == 0x55)
 130   3                      {
 131   4                          usart_rx_buffer[0] = Data;
 132   4                          usart_rx_cnt++;
 133   4                        //  putchar( usart_rx_cnt);
 134   4                          usart_rx_flag = 1;
 135   4                        // hal_uart_putchar( Data);
 136   4                        // LED1 = !LED1;
 137   4                        
 138   4                      }
 139   3                      break;
 140   3                  case 1:
 141   3            
 142   3                temper_val = Data;
 143   3                 //hal_uart_putchar( temper_val);
 144   3               usart_rx_flag = 2;
 145   3              
 146   3                      break;
 147   3      
 148   3              }
 149   2              
 150   2          
 151   2          }
 152   1        }                 
 153          
 154          
 155          
 156          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    216    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     33       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
